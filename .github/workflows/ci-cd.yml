name: AI Community Platform CI/CD

# Trigger the workflow on push to main branch and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Define environment variables
env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Continuous Integration Job
  ci:
    name: 🔍 Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      # Step 2: Setup Node.js environment
      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      # Step 3: Install dependencies
      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps
        
      # Step 4: Run linting
      - name: 🔍 Run ESLint
        run: npm run lint
        
      # Step 5: Run type checking
      - name: 🔧 Type check
        run: npx tsc --noEmit
        
      # Step 6: Run tests (when we add them)
      - name: 🧪 Run tests
        run: npm test
        continue-on-error: true # Allow failure for now since tests aren't implemented
        
      # Step 7: Build the application
      - name: 🏗️ Build application
        run: |
          npm run build
          # Create a simple build info file
          echo "Build completed at $(date)" > build-info.txt
        
      # Step 8: Upload build artifacts
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1
          compression-level: 9

  # Security and Quality Checks
  security:
    name: 🔒 Security & Quality
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps
        
      # Security audit
      - name: 🔍 Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      # Check for outdated dependencies
      - name: 📊 Check outdated packages
        run: npm outdated
        continue-on-error: true

  # Continuous Deployment Job (Preview)
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: 📤 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🚀 Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT
          
      - name: 💬 Comment Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Preview Deployment Ready!**\n\n📱 Preview URL: ${{ steps.deploy.outputs.preview_url }}\n\n✅ This preview will be automatically updated with new commits.'
            })

  # Continuous Deployment Job (Production)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.production_url }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: 📤 Pull Vercel Environment Information
        run: |
          vercel pull --yes \
            --environment=production \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_ORG_ID }} \
            --confirm
        
      - name: 🏗️ Build Project Artifacts
        run: |
          vercel build --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_ORG_ID }} \
            --confirm
        
      - name: 🚀 Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_ORG_ID }} \
            --confirm)
          echo "production_url=$url" >> $GITHUB_OUTPUT
          
      - name: 📊 Performance Audit (Lighthouse)
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ steps.deploy.outputs.production_url }}
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Notification Job
  notify:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 📢 Deployment Success Notification
        if: needs.deploy-production.result == 'success'
        run: |
          echo "🎉 Production deployment successful!"
          echo "🌐 Live URL: ${{ needs.deploy-production.outputs.production_url }}"
          
      - name: ❌ Deployment Failure Notification
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "❌ Production deployment failed!"
          echo "🔍 Check the logs above for details."
